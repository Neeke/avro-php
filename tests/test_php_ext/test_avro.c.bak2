
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <inttypes.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <avro.h>

#include <strings.h>
#include "php.h"
#include "php_ini.h"
#include "main/SAPI.h"
#include "ext/standard/info.h"
#include "ext/standard/php_smart_str.h"
#include "php_test_avro.h"

/* If you declare any globals in php_test_avro.h uncomment this: */
ZEND_DECLARE_MODULE_GLOBALS(test_avro)
static PHP_GINIT_FUNCTION(test_avro);

/* True global resources - no need for thread safety here */
static int le_test_avro;

/* {{{ test_avro_functions[]
 *
 * Every user visible function must have an entry in test_avro_functions[].
 */
const zend_function_entry test_avro_functions[] = {
	PHP_FE(confirm_test_avro_compiled,	NULL)		/* For test_avroing, remove later. */
	PHP_FE(hello_avro,	NULL)
	PHP_FE(self_concat,	NULL)
	PHP_FE_END	/* Must be the last line in test_avro_functions[] */
};
/* }}} */


#if ZEND_MODULE_API_NO >= 20050922
zend_module_dep test_avro_deps[] = {
//	ZEND_MOD_REQUIRED("curl")
	ZEND_MOD_REQUIRED("json")
	{NULL, NULL, NULL}
};
#endif

#ifdef COMPILE_DL_TEST_AVRO
ZEND_GET_MODULE(test_avro)
#endif

/* {{{ PHP_INI
 */
/* Remove comments and fill if you need to have entries in php.ini */
PHP_INI_BEGIN()
    STD_PHP_INI_ENTRY("test_avro.global_value",      "42", PHP_INI_ALL, OnUpdateLong, global_value, zend_test_avro_globals, test_avro_globals)
    STD_PHP_INI_ENTRY("test_avro.global_string", "foobar", PHP_INI_ALL, OnUpdateString, global_string, zend_test_avro_globals, test_avro_globals)
PHP_INI_END()

/* }}} */

PHP_GINIT_FUNCTION(test_avro)
{
//    php_printf("GINIT START\n");

    memset(test_avro_globals, 0, sizeof(zend_test_avro_globals));
//    initGlobals(TSRMLS_C);
    test_avro_globals->test_avro_long = 15;
    test_avro_globals->test_avro_char = "char is a test_avro.";

    zend_hash_init(&test_avro_globals->test_avro_zval, 0, NULL, NULL, 1);
    zend_hash_add_empty_element(&test_avro_globals->test_avro_zval,TS_S_L("curl_init"));
    zend_hash_add_empty_element(&test_avro_globals->test_avro_zval,TS_S_L("curl_setopt"));
    zend_hash_add_empty_element(&test_avro_globals->test_avro_zval,TS_S_L("curl_setopt_array"));
    zend_hash_add_empty_element(&test_avro_globals->test_avro_zval,TS_S_L("curl_exec"));
    zend_hash_add_empty_element(&test_avro_globals->test_avro_zval,TS_S_L("file_get_contents"));

    //初始化类的白名单
    zend_hash_init(&test_avro_globals->classMethodWhite, 0, NULL, NULL, 1);

    //PDO
    HashTable pdoMethod; zend_hash_init(&pdoMethod, 0, NULL, NULL, 1);
    zend_hash_add_empty_element(&pdoMethod,TS_S_L("__construct"));
    zend_hash_add_empty_element(&pdoMethod,TS_S_L("query"));
    zend_hash_add_empty_element(&pdoMethod,TS_S_L("prepare"));
    zend_hash_add(&test_avro_globals->classMethodWhite, "PDO",strlen("PDO")+1, (void *)&pdoMethod, sizeof(HashTable), NULL);

    //mysqli
    HashTable mysqliMethod; zend_hash_init(&mysqliMethod, 0, NULL, NULL, 1);
    zend_hash_add_empty_element(&mysqliMethod,TS_S_L("prepare"));
    zend_hash_add(&test_avro_globals->classMethodWhite, "mysqli",strlen("mysqli")+1, (void *)&mysqliMethod, sizeof(HashTable), NULL);

    //Memcache
    HashTable memcacheMethod; zend_hash_init(&memcacheMethod, 0, NULL, NULL, 1);
    zend_hash_add_empty_element(&memcacheMethod,TS_S_L("connect"));
    zend_hash_add(&test_avro_globals->classMethodWhite, "Memcache",strlen("Memcache")+1, (void *)&memcacheMethod, sizeof(HashTable), NULL);

    //Redis
    HashTable redisMethod; zend_hash_init(&redisMethod, 0, NULL, NULL, 1);
    zend_hash_add_empty_element(&redisMethod,TS_S_L("connect"));
    zend_hash_add(&test_avro_globals->classMethodWhite, "Redis",strlen("Redis")+1, (void *)&redisMethod, sizeof(HashTable), NULL);

    //Predis\Client
    HashTable PredisClientMethod; zend_hash_init(&PredisClientMethod, 0, NULL, NULL, 1);
    zend_hash_add_empty_element(&PredisClientMethod,TS_S_L("connect"));
    zend_hash_add(&test_avro_globals->classMethodWhite, "Predis\\Client",strlen("Predis\\Client")+1, (void *)&PredisClientMethod, sizeof(HashTable), NULL);

    //Mongo
    HashTable MongoMethod; zend_hash_init(&MongoMethod, 0, NULL, NULL, 1);
    zend_hash_add_empty_element(&MongoMethod,TS_S_L("__construct"));
    zend_hash_add(&test_avro_globals->classMethodWhite, "Mongo",strlen("Mongo")+1, (void *)&MongoMethod, sizeof(HashTable), NULL);


//    php_printf("GINIT END\n");
}

PHP_GSHUTDOWN_FUNCTION(test_avro)
{
//    php_printf("GSHUTDOWN START\n");
    zend_hash_destroy(&test_avro_globals->test_avro_zval);
//    php_printf("GSHUTDOWN END\n");
}

/* {{{ PHP_MINIT_FUNCTION
 */
PHP_MINIT_FUNCTION(test_avro)
{
//    php_printf("MINIT START\n");

	/* If you have INI entries, uncomment these lines */
	REGISTER_INI_ENTRIES();

//    php_printf("MINIT END\n");
	return SUCCESS;
}
/* }}} */

/* {{{ PHP_MSHUTDOWN_FUNCTION
 */
PHP_MSHUTDOWN_FUNCTION(test_avro)
{
//    php_printf("MSHUTDOWN START\n");
	/* uncomment this line if you have INI entries */
	UNREGISTER_INI_ENTRIES();

//    php_printf("MSHUTDOWN END\n");
	return SUCCESS;
}
/* }}} */

#define check_i(call) \
    do { \
        if ((call) != 0) { \
            fprintf(stderr, "Error: %s\n", avro_strerror()); \
            exit(EXIT_FAILURE); \
        } \
    } while (0)

#define check_p(call) \
    do { \
        if ((call) == NULL) { \
            fprintf(stderr, "Error: %s\n", avro_strerror()); \
            exit(EXIT_FAILURE); \
        } \
    } while (0)





#define WRITER_SCHEMA \
    "{" \
    "  \"type\": \"record\"," \
    "  \"name\": \"test\"," \
    "  \"fields\": [" \
    "    { \"name\": \"a\", \"type\": \"int\" }," \
    "    { \"name\": \"b\", \"type\": \"int\" }" \
    "  ]" \
    "}"

#define READER_SCHEMA_A \
    "{" \
    "  \"type\": \"record\"," \
    "  \"name\": \"test\"," \
    "  \"fields\": [" \
    "    { \"name\": \"a\", \"type\": \"int\" }" \
    "  ]" \
    "}"

#define READER_SCHEMA_B \
    "{" \
    "  \"type\": \"record\"," \
    "  \"name\": \"test\"," \
    "  \"fields\": [" \
    "    { \"name\": \"b\", \"type\": \"int\" }" \
    "  ]" \
    "}"


static void
write_data(const char *filename)
{
    avro_file_writer_t  file;
    avro_schema_t  writer_schema;
    avro_schema_error_t  error;
    avro_value_iface_t  *writer_iface;
    avro_value_t  writer_value;
    avro_value_t  field;

    check_i(avro_schema_from_json(WRITER_SCHEMA, 0, &writer_schema, &error));

    check_p(writer_iface = avro_generic_class_from_schema(writer_schema));
    check_i(avro_generic_value_new(writer_iface, &writer_value));

    check_i(avro_file_writer_create(filename, writer_schema, &file));

        /* record 1 */
        check_i(avro_value_get_by_name(&writer_value, "a", &field, NULL));
        check_i(avro_value_set_int(&field, 10));
        check_i(avro_value_get_by_name(&writer_value, "b", &field, NULL));
        check_i(avro_value_set_int(&field, 11));
        check_i(avro_file_writer_append_value(file, &writer_value));

        /* record 2 */
        check_i(avro_value_get_by_name(&writer_value, "a", &field, NULL));
        check_i(avro_value_set_int(&field, 20));
        check_i(avro_value_get_by_name(&writer_value, "b", &field, NULL));
        check_i(avro_value_set_int(&field, 21));
        check_i(avro_file_writer_append_value(file, &writer_value));

        /* record 3 */
        check_i(avro_value_get_by_name(&writer_value, "a", &field, NULL));
        check_i(avro_value_set_int(&field, 30));
        check_i(avro_value_get_by_name(&writer_value, "b", &field, NULL));
        check_i(avro_value_set_int(&field, 31));
        check_i(avro_file_writer_append_value(file, &writer_value));

        /* record 4 */
        check_i(avro_value_get_by_name(&writer_value, "a", &field, NULL));
        check_i(avro_value_set_int(&field, 40));
        check_i(avro_value_get_by_name(&writer_value, "b", &field, NULL));
        check_i(avro_value_set_int(&field, 41));
        check_i(avro_file_writer_append_value(file, &writer_value));

        /* record 5 */
        check_i(avro_value_get_by_name(&writer_value, "a", &field, NULL));
        check_i(avro_value_set_int(&field, 50));
        check_i(avro_value_get_by_name(&writer_value, "b", &field, NULL));
        check_i(avro_value_set_int(&field, 51));
        check_i(avro_file_writer_append_value(file, &writer_value));

        avro_file_writer_close(file);
        avro_value_decref(&writer_value);
        avro_value_iface_decref(writer_iface);
        avro_schema_decref(writer_schema);
    }

  static void
  read_using_writer_schema(const char *filename)
  {
      avro_file_reader_t  file;
      avro_schema_t  writer_schema;
      avro_value_iface_t  *writer_iface;
      avro_value_t  writer_value;

          check_i(avro_file_reader(filename, &file));
          writer_schema = avro_file_reader_get_writer_schema(file);

            check_p(writer_iface = avro_generic_class_from_schema(writer_schema));
            check_i(avro_generic_value_new(writer_iface, &writer_value));

             while (avro_file_reader_read_value(file, &writer_value) == 0) {
                    avro_value_t  field;
                    int32_t  a;
                    int32_t  b;

                    check_i(avro_value_get_by_name(&writer_value, "a", &field, NULL));
                    check_i(avro_value_get_int(&field, &a));
                    check_i(avro_value_get_by_name(&writer_value, "b", &field, NULL));
                    check_i(avro_value_get_int(&field, &b));
                    printf("  a: %" PRId32 ", b: %" PRId32 "\n", a, b);
                }
    avro_file_reader_close(file);
    avro_value_decref(&writer_value);
    avro_value_iface_decref(writer_iface);
    avro_schema_decref(writer_schema);
}


static void
read_with_schema_resolution(const char *filename,
                            const char *reader_schema_json,
                            const char *field_name)
{
    avro_file_reader_t  file;
    avro_schema_error_t  error;
    avro_schema_t  reader_schema;
    avro_schema_t  writer_schema;
    avro_value_iface_t  *writer_iface;
    avro_value_iface_t  *reader_iface;
    avro_value_t  writer_value;
    avro_value_t  reader_value;

    check_i(avro_file_reader(filename, &file));
        writer_schema = avro_file_reader_get_writer_schema(file);
check_i(avro_schema_from_json
            (reader_schema_json, 0, &reader_schema, &error));
    check_p(reader_iface = avro_generic_class_from_schema(reader_schema));
    check_i(avro_generic_value_new(reader_iface, &reader_value));
     check_p(writer_iface =
                avro_resolved_writer_new(writer_schema, reader_schema));

                 check_i(avro_resolved_writer_new_value(writer_iface, &writer_value));
                    avro_resolved_writer_set_dest(&writer_value, &reader_value);

    while (avro_file_reader_read_value(file, &writer_value) == 0) {
        avro_value_t  field;
        int32_t  value;

        check_i(avro_value_get_by_name(&reader_value, field_name, &field, NULL));
        check_i(avro_value_get_int(&field, &value));
        printf("  %s: %" PRId32 "\n", field_name, value);
    }

    avro_file_reader_close(file);
    avro_value_decref(&writer_value);
    avro_value_iface_decref(writer_iface);
    avro_schema_decref(writer_schema);
    avro_value_decref(&reader_value);
    avro_value_iface_decref(reader_iface);
    avro_schema_decref(reader_schema);
}

/* Remove if there's nothing to do at request start */
/* {{{ PHP_RINIT_FUNCTION
 */
PHP_RINIT_FUNCTION(test_avro)
{
//    php_printf("RINIT START\n");

//    php_printf("TEST_AVRO_G(global_value) %d\n",TEST_AVRO_G(global_value));
//    php_printf("TEST_AVRO_G(test_avro_long) %d\n",TEST_AVRO_G(test_avro_long));
//    php_printf("TEST_AVRO_G(test_avro_char) %s\n",TEST_AVRO_G(test_avro_char));
//    if (TEST_AVRO_G(test_avro_zval)) {
////        php_printf("TEST_AVRO_G(test_avro_zval) 's type is %ld\n",Z_TYPE_P(TEST_AVRO_G(test_avro_zval)));
////        php_var_dump(TEST_AVRO_G(test_avro_zval),1 TSRMLS_CC);
//    }

//    php_printf("RINIT END\n");
	return SUCCESS;
}
/* }}} */

/* Remove if there's nothing to do at request end */
/* {{{ PHP_RSHUTDOWN_FUNCTION
 */
PHP_RSHUTDOWN_FUNCTION(test_avro)
{
//    php_printf("SG(sapi_headers).mimetype is %s\n",SG(sapi_headers).mimetype);
	return SUCCESS;
}
/* }}} */

/* {{{ PHP_MINFO_FUNCTION
 */
PHP_MINFO_FUNCTION(test_avro)
{
	php_info_print_table_start();
	php_info_print_table_header(2, "test_avro support", "enabled");
	php_info_print_table_end();

	/* Remove comments if you have entries in php.ini */
	DISPLAY_INI_ENTRIES();
}
/* }}} */

zend_module_entry test_avro_module_entry =
{
#if ZEND_MODULE_API_NO >= 20050922
	STANDARD_MODULE_HEADER_EX, NULL,
	test_avro_deps,
#else
	STANDARD_MODULE_HEADER,
#endif
    "test_avro",
    test_avro_functions,
    PHP_MINIT(test_avro),
    PHP_MSHUTDOWN(test_avro),
    PHP_RINIT(test_avro),
    PHP_RSHUTDOWN(test_avro),
    PHP_MINFO(test_avro),
    "0.1",
    PHP_MODULE_GLOBALS(test_avro),
    PHP_GINIT(test_avro),
    PHP_GSHUTDOWN(test_avro),
    NULL,
    STANDARD_MODULE_PROPERTIES_EX
};


/* Remove the following function when you have succesfully modified config.m4
   so that your module can be compiled into PHP, it exists only for test_avroing
   purposes. */

/* Every user-visible function in PHP should document itself in the source */
/* {{{ proto string confirm_test_avro_compiled(string arg)
   Return a string to confirm that the module is compiled in */
PHP_FUNCTION(confirm_test_avro_compiled)
{
	char *arg = NULL;
	int arg_len, len;
	char *strg;

	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &arg, &arg_len) == FAILURE) {
		return;
	}

	len = spprintf(&strg, 0, "Congratulations! You have successfully modified ext/%.78s/config.m4. Module %.78s is now compiled into PHP.", "test_avro", arg);
	RETURN_STRINGL(strg, len, 0);
}
/* }}} */
/* The previous line is meant for vim and emacs, so it can correctly fold and
   unfold functions in source code. See the corresponding marks just before
   function definition, where the functions purpose is also documented. Please
   follow this convention for the convenience of others editing your code.
*/


/* {{{ proto int hello(int a, int b)
    */
PHP_FUNCTION(hello_avro)
{
	int argc = ZEND_NUM_ARGS();
	long a;
	long b;

	if (zend_parse_parameters(argc TSRMLS_CC, "ll", &a, &b) == FAILURE)
		return;


//    php_printf("hello start\n");

//    php_printf("TEST_AVRO_G(global_value) %d\n",TEST_AVRO_G(global_value));
//    php_printf("TEST_AVRO_G(test_avro_long) %d\n",TEST_AVRO_G(test_avro_long));
//    php_printf("TEST_AVRO_G(test_avro_char) %s\n",TEST_AVRO_G(test_avro_char));

#define FILENAME  "test-data.avro"

    printf("Writing data...\n");
    write_data(FILENAME);

    printf("Reading data using same schema...\n");
    read_using_writer_schema(FILENAME);

    printf("Reading data with schema resolution, keeping field \"a\"...\n");
    read_with_schema_resolution(FILENAME, READER_SCHEMA_A, "a");

    printf("Reading data with schema resolution, keeping field \"b\"...\n");
    read_with_schema_resolution(FILENAME, READER_SCHEMA_B, "b");


//    php_printf("TEST_AVRO_G(global_value) %d\n",TEST_AVRO_G(global_value));
//
//    php_printf("hello end\n");


//	php_error(E_WARNING, "hello: not yet implemented");

//    RETURN_ZVAL(TEST_AVRO_G(test_avro_zval), 1, 0);

    RETURN_LONG(a+b);
}
/* }}} */

/* {{{ proto string self_concat(string str, int n)

*/

PHP_FUNCTION(self_concat)
{

    char *str = NULL;

    int argc = ZEND_NUM_ARGS();

    int str_len;

    long n;

    char *result; /* Points to resulting string */

    char *ptr; /* Points at the next location we want to copy to */

    int result_length; /* Length of resulting string */

    if (zend_parse_parameters(argc TSRMLS_CC, "sl", &str, &str_len, &n) == FAILURE)

    return;

    /* Calculate length of result */

    result_length = (str_len * n);

    /* Allocate memory for result */

    result = (char *) emalloc(result_length + 1);

    /* Point at the beginning of the result */

    ptr = result;

    while (n--) {

        /* Copy str to the result */

        memcpy(ptr, str, str_len);

        /* Increment ptr to point at the next position we want to write to */

        ptr += str_len;

    }

    /* Null terminate the result. Always null-terminate your strings

    even if they are binary strings */

    *ptr = '\0';

    /* Return result to the scripting engine without duplicating it*/

    RETURN_STRINGL(result, result_length, 0);

}

/* }}} */


/*
 * Local variables:
 * tab-width: 4
 * c-basic-offset: 4
 * End:
 * vim600: noet sw=4 ts=4 fdm=marker
 * vim<600: noet sw=4 ts=4
 */
